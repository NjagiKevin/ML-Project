name: workflow

on:
  push:
    branches:
      - main  # Triggers the workflow when code is pushed to the main branch
    paths-ignore:
      - 'README.md'  # Ignores changes to the README.md file

permissions:
  id-token: write  # Grants permission to write an ID token
  contents: read   # Grants permission to read repository contents

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest  # Specifies the OS for the job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Checks out the code from the repository

      - name: Lint code
        run: echo "Linting repository"  # Placeholder for linting step; replace with actual linting command

      - name: Run unit tests
        run: echo "Running unit tests"  # Placeholder for running unit tests; replace with actual test command

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration  # This job depends on the successful completion of the integration job
    runs-on: ubuntu-latest  # Specifies the OS for the job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Checks out the code from the repository

      - name: Install Utilities
        run: |
          sudo apt-get update  # Updates the package list
          sudo apt-get install -y jq unzip  # Installs jq and unzip utilities

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1  # Configures AWS credentials for further AWS actions
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Retrieves AWS access key from secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Retrieves AWS secret access key from secrets
          aws-region: ${{ secrets.AWS_REGION }}  # Retrieves AWS region from secrets

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Logs in to Amazon ECR to enable image pushes

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # Sets the ECR registry URL from the login step
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}  # Retrieves the ECR repository name from secrets
          IMAGE_TAG: latest  # Defines the image tag as 'latest'
        run: |
          # Build a Docker container and push it to ECR for deployment to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  # Builds the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  # Pushes the Docker image to ECR
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"  # Sets the output for the image URL

  Continuous-Deployment:
    needs: build-and-push-ecr-image  # This job depends on the successful completion of the build-and-push-ecr-image job
    runs-on: self-hosted  # Specifies that this job runs on a self-hosted runner
    steps:
      - name: Checkout
        uses: actions/checkout@v3  # Checks out the code from the repository

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1  # Configures AWS credentials for further AWS actions
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Retrieves AWS access key from secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Retrieves AWS secret access key from secrets
          aws-region: ${{ secrets.AWS_REGION }}  # Retrieves AWS region from secrets

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Logs in to Amazon ECR to enable image pulls

      - name: Pull latest images
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest  # Pulls the latest Docker image from ECR
         
      # - name: Stop and remove container if running
      #   run: |
      #    docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest
      # Uncomment this step to stop and remove a running container named "mltest" before starting a new one.
       
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          # Runs the Docker container from the latest image, exposing port 8080 and passing in AWS credentials as environment variables.

      - name: Clean previous images and containers
        run: |
          docker system prune -f  # Cleans up unused Docker images and containers to free up space
